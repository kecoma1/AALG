/**
 * @file times.h
 * @author Marcos Bernuy 
 *         Kevin de la Coba Malam
 * @brief File where the prototypes of functions are defined
 * @version 1.0
 * @date 2020-09-21
 * 
 * @copyright Copyright (c) 2020
 * 
 */

#ifndef TIEMPOS_H
#define TIEMPOS_H

/* constants */
#ifndef ERR
#define ERR -1
#define OK (!(ERR))
#endif

#include "permutations.h"
#include "sorting.h"
#include "search.h"
#include <time.h>

/* type definitions */
typedef struct time_aa {
    int N;             /* size of each element */
    int n_elems;       /* number of elements to average */
    double time;       /* average clock time */
    double average_ob; /* average number of times that the OB is executed */
    int min_ob;        /* minimum of executions of the OB */
    int max_ob;        /* maximum of executions of the OB */
} TIME_AA, *PTIME_AA;

/* Functions */
/**
 * @brief Calculates and saves in a TIME_AA the average, 
 *        minimun and maximun times to run an algorithim
 * 
 * @date 2020-09-21
 * @author Kevin de la Coba Malam and Marcos Bernuy
 * @param method Function to be measured in time
 * @param n_perms Number of permutations
 * @param N Size of each permutation
 * @param ptime Structure with all the data of the times and OBs
 * @return short Flag
 */
short average_sorting_time(pfunc_sort method, int n_perms, int N, PTIME_AA ptime);

/**
 * @brief Generates sorting times in a specific file 
 * 
 * 
 * @date 2020-09-21
 * @author Kevin de la Coba and Marcos Bernuy
 * @param method Function to be measured
 * @param file Name of the file where the info is going to be saved
 * @param num_min Minimun size
 * @param num_max Maximun size
 * @param incr Nummber that increments the size from the minimun to the maximun
 * @param n_perms Number of permutations
 * @return short Flag
 */
short generate_sorting_times(pfunc_sort method, char *file, int num_min, int num_max, int incr, int n_perms);

/**
 * @brief Saves all the info in a TIME_AA structure
 *  
 * @date 2020-09-21
 * @author Kevin de la Coba and Diego Toral
 * @param file Name of the file where the data is going to be saved
 * @param ptime Structure with all the data to be saved
 * @param n_times Times to print
 * @return short Flag
 */
short save_time_table(char *file, PTIME_AA time, int n_times);

/**
 * @brief Given a method to search, the function searches keys generated by a given generator
 *        The data related with the performance of the searching is stored in a given file
 * 
 * @param method Function to use in order to search keys
 * @param generator Generator which generates keys
 * @param order Order of the table. It can be ordered or dissordered
 * @param file File name where the data related with the performance is going to be stored
 * @param num_min Minumum size of the tables
 * @param num_max Maximum size of the table 
 * @param incr Increment in the table size per iteration
 * @param n_times Number of times to search in each table
 * @return short Status of the function
 */
short generate_search_times(pfunc_search method, pfunc_key_generator generator, 
                                int order, char* file, 
                                int num_min, int num_max, 
                                int incr, int n_times);

/**
 * @brief Given a size, a method and a key generator, the function searches in a table
 *        the generated keys n_times times 
 * 
 * @param method Function to use in order to search keys
 * @param generator Generator which generates keys 
 * @param order Order the table
 * @param N Size of the table
 * @param n_times Number of times to search in each table
 * @param ptime Time structure to store the data related with the performance
 * @return short Status of the function
 */
short average_search_time(pfunc_search metodo, pfunc_key_generator generator,
                              int order,
                              int N, 
                              int n_times,
                              PTIME_AA ptime);

#endif
